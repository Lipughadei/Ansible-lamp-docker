Ansible ad-hoc commands are simple one-line commands that allow you to perform tasks quickly without writing a full playbook.
They are useful for executing tasks on remote machines and are often used for quick administrative tasks. Below are some common Ansible ad-hoc commands categorized by their functionality.

Common Ansible Ad-Hoc Commands
Ping Command

Check connectivity to hosts:
bash

Verify

Open In Editor
Edit
Copy code
ansible all -m ping
Executing Shell Commands

Run a shell command on remote hosts:
bash

Verify

Open In Editor
Edit
Copy code
ansible all -m shell -a 'uptime'
Copying Files

Copy a file from the control machine to remote hosts:
bash

Verify

Open In Editor
Edit
Copy code
ansible all -m copy -a 'src=/path/to/local/file dest=/path/to/remote/file'
Fetching Files

Fetch a file from remote hosts to the control machine:
bash

Verify

Open In Editor
Edit
Copy code
ansible all -m fetch -a 'src=/path/to/remote/file dest=/path/to/local/directory flat=yes'
Installing Packages

Install a package using the apt module (for Debian/Ubuntu):

bash

Verify

Open In Editor
Edit
Copy code
ansible all -m apt -a 'name=package_name state=present'
Install a package using the yum module (for CentOS/RHEL):

bash

Verify

Open In Editor
Edit
Copy code
ansible all -m yum -a 'name=package_name state=present'
Managing Services

Start a service:

bash

Verify

Open In Editor
Edit
Copy code
ansible all -m service -a 'name=service_name state=started'
Stop a service:

bash

Verify

Open In Editor
Edit
Copy code
ansible all -m service -a 'name=service_name state=stopped'
Creating Users

Create a user:

bash

Verify

Open In Editor
Edit
Copy code
ansible all -m user -a 'name=username state=present'
Remove a user:

bash

Verify

Open In Editor
Edit
Copy code
ansible all -m user -a 'name=username state=absent'
Managing Files and Directories

Create a directory:

bash

Verify

Open In Editor
Edit
Copy code
ansible all -m file -a 'path=/path/to/directory state=directory'
Remove a file:

bash

Verify

Open In Editor
Edit
Copy code
ansible all -m file -a 'path=/path/to/file state=absent'
Template Files

Use the template module to deploy a Jinja2 template:
bash

Verify

Open In Editor
Edit
Copy code
ansible all -m template -a 'src=/path/to/template.j2 dest=/path/to/destination'
Gathering Facts

Gather facts about the hosts:
bash

Verify

Open In Editor
Edit
Copy code
ansible all -m setup
Running Playbooks

While not an ad-hoc command, you can run a playbook with:
bash

Verify

Open In Editor
Edit
Copy code
ansible-playbook /path/to/playbook.yml
Using Variables

Pass variables using the -e option:
bash

Verify

Open In Editor
Edit
Copy code
ansible all -m shell -a 'echo $MY_VAR' -e 'MY_VAR=Hello'
Specifying Hosts
You can specify hosts using the -i option for custom inventory files or use patterns like group_name, hostname, or all to target specific hosts.

bash

Verify

Open In Editor
Edit
Copy code
ansible webservers -m ping
Additional Options
Limit Execution: Use --limit to restrict the command to specific hosts.

bash

Verify

Open In Editor
Edit
Copy code
ansible all -m ping --limit webservers
Become: Use --become to run commands as a different user (like root).

bash

Verify

Open In Editor
Edit
Copy code
ansible all -m apt -a 'name=package_name state=present' --become
Conclusion
Ansible ad-hoc commands are a powerful way to perform quick tasks across multiple hosts without needing to write a full playbook.
They can be combined with various modules to manage configurations, deploy applications, and perform administrative tasks efficiently.
